#SingleInstance force

; #Persistent
; SetTimer, WatchCursor, 100
; return
;
; WatchCursor:
; MouseGetPos, xpos, ypos, id, control ; use current mouse pos
; PixelGetColor, dnpos, %xpos%, %ypos%
; ToolTip, xy : %xpos% x %ypos% : %dnpos%, 600, 1900
; PixelGetColor, stpos, 670, 2060 ; use set mouse pos
; ToolTip, %stpos%, 600, 1900
;    B2:="0x" SubStr(stpos,5,2) ;substr is to get the piece
;    B3:=B2+0 ;add 0 is to convert it to the current number format
; ToolTip, xy : %xpos% x %ypos% : %dnpos% | %stpos% | %B3%, 600, 1900
; return

; 370 x 2010
; 850 x 2080

; FileAppend , (Text with %variables%), Filename
; https://www.autohotkey.com/docs/commands/PixelSearch.htm

!m:: ; window focus?
Loop,
{
; test break and idle. needs set within all loops.
    if (GetKeyState("c"))
    {
        tooltip,
        return
    }

; what's active?
    WinGetActiveStats, qstnsT, qstnsW, qstnsH, qstnsX, qstnsY
    ToolTip, %qstnsT% %qstnsW% %qstnsH% %qstnsX% %qstnsY%, 800, 2020
    sleep, 1000
}


!b:: ; repeat ability
Loop,
{

; still there?
    if !WinExist("Dragon Age: Inquisition")
        return

; refocus
    if !WinActive("Dragon Age: Inquisition")
        WinActivate ; ("Dragon Age: Inquisition")

; test break and idle. needs set within all loops.
    if (GetKeyState("c"))
        return

        Send {3 down} ; 
        Sleep, 250 ;
        Send {3 up} ;
        Sleep, 6000 ;
;        Send {s down} ; 
        Sleep, 500 ;
;        Send {s up} ;
        Sleep, 8000 ;
}
; MouseMove, 910, 1335
 return

; war table, collect coin
!v::
Loop,
{
; still there?
    if !WinExist("Dragon Age: Inquisition")
        return

; test break and idle. needs set within all loops.
    if (GetKeyState("c"))
        return

; timestamps for sleep time?

; refocus
    if !WinActive("Dragon Age: Inquisition")
        WinActivate ; ("Dragon Age: Inquisition")

; randomize click locations.
    random, rx1, 668, 672
;    random, rx2, 908, 912
    random, rx2, 568, 572
    random, rx3, 913, 917
    random, ry1, 2058, 2062
;    random, ry2, 1333, 1337
    random, ry2, 1478, 1482

    random, slvrx, 2168, 2172
    random, slvry, 763, 767
    random, uslvrx, 1300, 1310
    random, uslvry, 1300, 1310

;    PixelGetColor, coin, 910, 1335 ; start mission
;    PixelGetColor, coin, 570, 1480 ; start mission
    PixelGetColor, coin, 670, 2060 ; start mission - bastion or harvest
    PixelGetColor, clct, 600, 2065 ; accept report
    B1:="0x" SubStr(coin,3,2) ; bastion of the pure, ore harvest
    B2:="0x" SubStr(coin,3,4) ; bastion of the pure, ore harvest
;    B3:=B2+0 ; convert b2 to decimal

; collect reward
    if (coin == 0x000000 || coin == 0x291C16) ; && clct == 0x000000)
        Click, %rx1%, %ry1%
    Sleep, 500 ;

; start mission
;    if (coin == 0x000416 || coin == 0x013878 || coin == 0x013979 || coin == 0x25618B || coin == 0x26528B) ; get coin, first town
;        Click, %rx2%, %ry2% ; coords to start mission, set above
    if (B2 = 0x1E1E)
        Click, %slvrx%, %slvry% ; coords to start mission, set above
    Sleep, 500 ;
    MouseMove, %rx1%, %ry1% ; move to diff coords, because colors

; select unit to send
    if (B1 = 0x1E && B2 != 0x1E1E)
    {
        Click, %uslvrx%, %uslvry%
        Sleep, 500 ;
        Click, %rx3%, %uslvry% ; %ry2%
        Sleep, 180000 ;
    }    
;    if (coin == 0x6A7271)
;        Click, %rx3%, %ry2%
    Sleep, 500 ;
    
; waste time
    Sleep, 1000 ;
;        random, rx, 1, 2000
;        random, ry, 1, 1000
;    MouseMove, %rx%, %ry%

; MouseGetPos, xpos, ypos, id, control ; use current mouse pos
; PixelGetColor, nmyhp, %xpos%, %ypos%
; ToolTip, xy : %xpos% x %ypos% : %nmyhp%

}
return

!x::
Loop,
{
; still there?
    if !WinExist("Dragon Age: Inquisition")
        return

; refocus
    if !WinActive("Dragon Age: Inquisition")
        WinActivate ; ("Dragon Age: Inquisition")

; test for enemy hp bar
    PixelGetColor, nmyhp, 1513, 113
    if !(nmyhp == 0x0000D6 || nmyhp == 0x9B4680 || nmyhp == 0x9C4780  || nmyhp == 0x565364 || nmyhp == 0x403C4A)
    {
        Send {Tab down} ; toggle target
        Sleep, 250 ;
        Send {Tab up} ;
        Sleep, 500 ;
        PixelGetColor, nmyhp, 1513, 113
    }
    ToolTip, %nmyhp%, 600, 1900
    Sleep, 250 ;

; do stuff if enemy toggled
    if (nmyhp == 0x0000D6 || nmyhp == 0x9B4680 || nmyhp == 0x9C4780  || nmyhp == 0x565364 || nmyhp == 0x403C4A || nmyhp == 0x35313D)
    {
        if (GetKeyState("q"))
            Send {q up} ; 
        if (GetKeyState("w"))
            Send {w up} ; 
        if (GetKeyState("e"))
            Send {e up} ; 
        if (GetKeyState("a"))
            Send {a up} ; 
        if (GetKeyState("s"))
            Send {s up} ; 
        if (GetKeyState("d"))
            Send {d up} ; 

        if (A_Sec <= 2)
        {
            Send {Tab down} ; toggle target
            Sleep, 250 ;
            Send {Tab up} ;
            Sleep, 250 ;
        }
        Send {f down} ; get loot
        Sleep, 250 ;
        Send {f up} ;
        Sleep, 250 ;
        Send {y down} ; attack my target
        Sleep, 250 ;
        Send {y up} ;
        Sleep, 100 ;
;        Send {z down} ; controled unit attack
;        Sleep, 250 ;
;        Send {z up} ;
;        Sleep, 100 ;
        random, atk, 1, 100
        Sleep, 100 ;
        atka := SubStr(atk,0,1)
        Sleep, 100 ;
;        if (atka < 7)
        if (atka = 6)
        {
            Send {%atka% down} ; controled unit attack
            Sleep, 250 ;
            Send {%atka% up} ;
        }
        Sleep, 100 ;
        

; test break and idle. needs set within all loops.
        if (GetKeyState("c"))
            return

    }

; movement

    else
    {

; test break and idle. needs set within all loops.
        if (GetKeyState("c"))
            return

; random movement of camera for move direction
        random, trv, 1, 3
        random, drc, 1, 100
        random, drfb, 1, 100
        random, drlr, 1, 100
        random, drct, 500, 10000 ; 250, 1250
        random, s1, 250, 1000
        random, s2, 500, 1500
        random, s3, 100, 500

; toggle target, get loot, search. or, random commands.
        Send {f down} ; get loot
        Sleep, s3 ;
        Send {f up} ;
        Sleep, s1 ;

; move by random key up/down

        if (rmvc > rmvt || !rmvc)
        {
            random, rmvt, 0, 5
            rmvc := 0 ; reset counter

            random, rmv, 1, 8 ; 100
            Sleep, 100 ;
            rmva := SubStr(rmv,0,1)
            Sleep, 100 ;

;            if (rmva = 1)
;            {
;                if (GetKeyState("e"))
;                    Send {e up} ; release strafe right
;                Sleep, 100 ;
;                if !(GetKeyState("q"))
;                    Send {q down} ; strafe left
;            }
    
            if (rmva = 2 || rmva = 4 || rmva = 6)
;            if (rmva = 2)
            {
;                if (GetKeyState("s"))
                    Send {s up} ; release backwards
                Sleep, 100 ;
                if !(GetKeyState("w"))
                    Send {w down} ; move forward
            }
    
;            if (rmva = 3)
;            {
;;                if (GetKeyState("q"))
;                    Send {q up} ; release strafe left
;                Sleep, 100 ;
;                if !(GetKeyState("e"))
;                    Send {e down} ; strafe right
;            }
    
;            if (rmva = 4)
;            {
;;                if (GetKeyState("d"))
;                    Send {d up} ; release camera rotate right
;                Sleep, 100 ;
;                if !(GetKeyState("a"))
;                    Send {a down} ; cameral rotate left
;            }
    
            if (rmva = 1 || rmva = 3 || rmva = 5)
;            if (rmva = 5)
            {
;                if (GetKeyState("w"))
                    Send {w up} ; release forwards
                Sleep, 100 ;
                if !(GetKeyState("s"))
                    Send {s down} ; move backwards
            }
    
;            if (rmva = 6)
;            {
;;                if (GetKeyState("a"))
;                    Send {a up} ; release camera rotate left
;                Sleep, 100 ;
;                if !(GetKeyState("d"))
;                    Send {d down} ; camera rotate right
;            }
    
            if (rmva = 7) ; all stop
            {
                if (GetKeyState("q"))
                    Send {q up} ; 
                if (GetKeyState("w"))
                    Send {w up} ; 
                if (GetKeyState("e"))
                    Send {e up} ; 
                if (GetKeyState("a"))
                    Send {a up} ; 
                if (GetKeyState("s"))
                    Send {s up} ; 
                if (GetKeyState("d"))
                    Send {d up} ; 
            }

            if (rmva = 8) ; reverse direction
            {
                if (GetKeyState("e"))
                {
                    Send {e up} ; 
;                    Sleep, 100 ;
                    Send {q down} ; 
                }
                else if (GetKeyState("q"))
                {
                    Send {q up} ; 
;                    Sleep, 100 ;
                    Send {e down} ; 
                }
                if (GetKeyState("a"))
                {
                    Send {a up} ; release camera rotate left
;                    Sleep, 100 ;
                    Send {d down} ; camera rotate right
                }
                else if (GetKeyState("d"))
                {
                    Send {d up} ; 
;                    Sleep, 100 ;
                    Send {a down} ;
                }
                if (GetKeyState("s"))
                {
                    Send {s up} ; release backwards
;                    Sleep, 100 ;
                    Send {w down} ; move forward
                }
                else if (GetKeyState("w"))
                {
                    Send {w up} ; release forward
;                    Sleep, 100 ;
                    Send {s down} ; move backwards
                }
            }

            if (rmva = 9) ; 
            {
                if (GetKeyState("a"))
                {
                    Send {a up} ; release camera rotate left
                }
                if (GetKeyState("d"))
                {
                    Send {d up} ; release camera rotate right
                }
            }

            if (rmva = 0) ; 
            {
                if (GetKeyState("q"))
                {
                    Send {q up} ; release camera rotate left
                }
                if (GetKeyState("e"))
                {
                    Send {e up} ; release camera rotate right
                }
            }
        }
        rmvc++
        ToolTip, %rmvc% %rmvt% %rmva%, 600, 1900

; end move by random key up/down

; move on sleep timer
;        if (trv = 1) {
;            if (drc < 51)
;            {
;                Send {a down} ; turn left
;                Sleep, s2 ;
;                Send {a up} ;
;            }
;            else
;            {
;                Send {d down} ; turn right
;                Sleep, s2 ;
;                Send {d up} ;
;            }
;        }
;        Sleep, s3 ;
;        if (trv = 2) {
;            if (drfb < 51)
;            {
;                Send {w down} ; move forward
;                Sleep, drct ;
;                Send {w up} ;
;            }
;            else
;            {
;                Send {s down} ; move backward
;                Sleep, drct ;
;                Send {s up} ;
;            }
;        }
;        Sleep, s3 ;
;        if (trv = 3) {
;            if (drlr < 51)
;            {
;                Send {q down} ; move left
;                Sleep, drct ;
;                Send {q up} ;
;            }
;            else
;            {
;                Send {e down} ; move right
;                Sleep, drct ;
;                Send {e up} ;
;            }
;        }
; end move on sleep timer

        Sleep, s2 ;
        Send {f down} ; get loot/close loot window
        Sleep, s1 ;
        Send {f up} ;
        Sleep, s2 ;
        Send {v down} ; area search
        Sleep, s1 ;
        Send {v up} ;
        Sleep, s3 ;

            if (A_Min == 0) ; || A_Min == 15 || A_Min == 30 || A_Min == 45)
            {
                Send {f5 down} ;
                Sleep, s3 ;
                Send {f5 up} ;
                Sleep, s1 ;
            } 


; switch units in case one gets stuck, close disconnect msg, refocus when only win open.
;        if (A_Sec <= 7 && (A_Min == 0 || A_Min == 15 || A_Min == 30 || A_Min == 45))
;        if (A_Sec <= 7 && (A_Min == 0 || A_Min == 20 || A_Min == 40))
;        {
; switch units at specific time        
;            if (A_Sec <= 7 && SubStr(A_MIN,0,1) = 0)
            if (A_Sec <= 7 && A_Min == 0)
            {
                Send {f1 down} ;
                Sleep, 100 ;
                Send {f1 up} ;
                Sleep, 100 ;
            } 

            if (A_Sec <= 7 && A_Min == 20) ; 15)
            {
                Send {f2 down} ;
                Sleep, 100 ;
                Send {f2 up} ;
                Sleep, 100 ;
            }

            if (A_Sec <= 7 && A_Min == 40) ; 30)
            {
                Send {f3 down} ;
                Sleep, 100 ;
                Send {f3 up} ;
                Sleep, 100 ;
            }
;
;            if (A_Min == 45) ; typically mage for revive/range atk.
;            {
;               Send {f4 down} ;
;                 Sleep, 100 ;
;                Send {f4 up} ;
;                Sleep, 100 ;
;            }

;            Send {alt down} ; alt+tab to refocus
;            Sleep, 100 ;
;            Send {tab down} ;
;            Sleep, 1000 ;
;            Send {tab up} ;
;            Sleep, 100 ;
;            Send {alt up} ;
;            Sleep, 100 ;
;            Send {space down} ; jump/close connect msg
;            Sleep, 100 ;
;            Send {space up} ;
;            Sleep, 100 ;
;        }
    }

}    ; end main
return

!z::
Loop,
{
; still there?
    if !WinExist("Dragon Age: Inquisition")
        return

; refocus
    if !WinActive("Dragon Age: Inquisition")
        WinActivate ; ("Dragon Age: Inquisition")

; test for enemy hp bar
    PixelGetColor, nmyhp, 1513, 113
    if !(nmyhp == 0x0000D6 || nmyhp == 0x9B4680 || nmyhp == 0x9C4780  || nmyhp == 0x565364 || nmyhp == 0x403C4A)
    {
        Send {Tab down} ; toggle target
        Sleep, 250 ;
        Send {Tab up} ;
        Sleep, 500 ;
        PixelGetColor, nmyhp, 1513, 113
    }
;    ToolTip, %nmyhp%, 600, 1900
    Sleep, 250 ;

; do stuff if enemy toggled
    if (nmyhp == 0x0000D6 || nmyhp == 0x9B4680 || nmyhp == 0x9C4780  || nmyhp == 0x565364 || nmyhp == 0x403C4A || nmyhp == 0x35313D)
    {
; test break and idle. needs set within all loops.
        if (GetKeyState("c"))
            return

        random, s1, 300, 600
        random, s3, 1500, 2500

        if (A_Sec <= 4)
        {
            Send {Tab down} ; toggle target
            Sleep, 250 ;
            Send {Tab up} ;
            Sleep, 250 ;
        }
        Send {f down} ; get loot
        Sleep, s1 ;
        Send {f up} ;
        Sleep, s3 ;
        Send {y down} ; attack my target
        Sleep, s1 ;
        Send {y up} ;
        Sleep, s3 ;
        Send {z down} ; controled unit attack
        Sleep, s1 ;
        Send {z up} ;
        Sleep, s3 ;
        random, atk, 1, 100
        Sleep, s1 ;
        atka := SubStr(atk,0,1)
        Sleep, s1 ;
        if (atka > 0 && atka < 7 && SubStr(A_Sec,0,1) < 2)
;        if (atka = 6)
        {
            Send {%atka% down} ; controled unit attack
            Sleep, s1 ;
            Send {%atka% up} ;
        }
        Sleep, s3 ;
        

; test break and idle. needs set within all loops.
        if (GetKeyState("c"))
            return

    }

; movement

    else
    {

; test break and idle. needs set within all loops.
        if (GetKeyState("c"))
            return

; random movement of camera for move direction
        random, s1, 150, 300
        random, s2, 300, 1000
        random, s3, 750, 1500

; toggle target, get loot, search. or, random commands.
        Send {f down} ; get loot
        Sleep, s1 ;
        Send {f up} ;
        Sleep, s3 ;
        Send {f down} ; get loot/close loot window
        Sleep, s1 ;
        Send {f up} ;
        Sleep, s2 ;
        Send {v down} ; area search
        Sleep, s1 ;
        Send {v up} ;
        Sleep, s1 ;

            if (A_Min == 0) ; || A_Min == 15 || A_Min == 30 || A_Min == 45)
            {
                Send {f5 down} ;
                Sleep, s1 ;
                Send {f5 up} ;
                Sleep, s2 ;
            } 


; switch units at specific time        
            if (A_Sec <= 7 && SubStr(A_MIN,0,1) = 6) ; A_Min == 0)
            {
                Send {f1 down} ;
                Sleep, s1 ;
                Send {f1 up} ;
            } 

;            if (A_Sec <= 7 && A_Min == 20) ; 15)
;            {
;                Send {f2 down} ;
;                Sleep, s1 ;
;                Send {f2 up} ;
;            }
;
;            if (A_Sec <= 7 && A_Min == 40) ; 30)
;            {
;                Send {f3 down} ;
;                Sleep, s1 ;
;                Send {f3 up} ;
;            }
;
;            if (A_Min == 45) ; typically mage for revive/range atk.
;            {
;                Send {f4 down} ;
;                Sleep, s1 ;
;                Send {f4 up} ;
;            }

    }

}    ; end main
return

^r::
{
   Run *RunAs "%A_ScriptFullPath%" 
   ExitApp
}
return
